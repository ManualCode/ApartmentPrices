// <auto-generated />
using System;
using ApartmentPrices.DataAcces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentPrices.DataAcces.Migrations
{
    [DbContext(typeof(ApartmentPricesDbContext))]
    [Migration("20250223122500_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.ApartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.ApartmentSubscriptionEntity", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriptionId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentSubscriptionEntity");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.PriceHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.ApartmentSubscriptionEntity", b =>
                {
                    b.HasOne("ApartmentPrices.DataAcces.Entities.ApartmentEntity", "Apartment")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApartmentPrices.DataAcces.Entities.SubscriptionEntity", "Subscription")
                        .WithMany("Apartments")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.PriceHistoryEntity", b =>
                {
                    b.HasOne("ApartmentPrices.DataAcces.Entities.ApartmentEntity", "Apartment")
                        .WithMany("Prices")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.ApartmentEntity", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ApartmentPrices.DataAcces.Entities.SubscriptionEntity", b =>
                {
                    b.Navigation("Apartments");
                });
#pragma warning restore 612, 618
        }
    }
}
